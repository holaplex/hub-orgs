//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.5

use poem_openapi::Object;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use super::sea_orm_active_enums::InviteStatus;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, Object)]
#[sea_orm(table_name = "invites")]
#[oai(rename = "Invite")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[oai(read_only)]
    pub id: Uuid,
    pub email: String,
    #[oai(read_only)]
    pub status: InviteStatus,
    #[oai(read_only)]
    pub organization_id: Uuid,
    #[oai(read_only)]
    pub created_by: Uuid,
    #[oai(read_only)]
    pub created_at: DateTime,
    #[oai(read_only)]
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::organizations::Entity",
        from = "Column::OrganizationId",
        to = "super::organizations::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Organizations,
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organizations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
