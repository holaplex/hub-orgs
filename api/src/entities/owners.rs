//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.5

use async_graphql::*;
use sea_orm::entity::prelude::*;

use super::organizations::Organization;
use crate::AppContext;

#[derive(Clone, Debug, Copy, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "owners")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub user_id: Uuid,
    pub organization_id: Uuid,
    pub created_at: DateTimeWithTimeZone,
}

/// The owner of the Holaplex organization, who is the individual that created the organization.
#[derive(SimpleObject, Clone, Debug, Copy)]
#[graphql(complex)]
pub struct Owner {
    /// The unique identifier assigned to the record of the user who created the Holaplex organization and serves as its owner, which is used to distinguish their record from other records within the Holaplex ecosystem.
    pub id: Uuid,
    /// The ID of the user who created the Holaplex organization and serves as its owner.
    pub user_id: Uuid,
    /// The ID assigned to the Holaplex organization owned by the user, which is used to distinguish it from other organizations within the Holaplex ecosystem."
    pub organization_id: Uuid,
    /// The datetime, in UTC, when the organization was created.
    pub created_at: DateTimeWithTimeZone,
}

#[ComplexObject]
impl Owner {
    /// The Holaplex organization owned by the user.
    async fn organization(&self, ctx: &Context<'_>) -> Result<Option<Organization>> {
        let AppContext {
            organization_loader,
            ..
        } = ctx.data::<AppContext>()?;

        organization_loader.load_one(self.organization_id).await
    }
}

impl From<Model> for Owner {
    fn from(
        Model {
            id,
            user_id,
            organization_id,
            created_at,
        }: Model,
    ) -> Self {
        Self {
            id,
            user_id,
            organization_id,
            created_at,
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::organizations::Entity",
        from = "Column::OrganizationId",
        to = "super::organizations::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Organizations,
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organizations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Entity {
    pub fn find_by_user(user: Uuid) -> Select<Self> {
        Self::find().filter(Column::UserId.eq(user))
    }
}
