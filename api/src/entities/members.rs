//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.5

use async_graphql::*;
use sea_orm::entity::prelude::*;

use super::{invites, organizations::Organization};
use crate::AppContext;

#[derive(Clone, Copy, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "members")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub user_id: Uuid,
    pub organization_id: Uuid,
    pub created_at: DateTime,
    #[sea_orm(nullable)]
    pub revoked_at: Option<DateTime>,
    pub invite_id: Uuid,
    pub deactivated_at: Option<DateTime>,
}

/// A member of a Holaplex organization, representing an individual who has been granted access to the organization.
#[derive(Clone, Copy, SimpleObject, Debug)]
#[graphql(complex)]
pub struct Member {
    /// The unique identifier of the member.
    pub id: Uuid,
    /// The ID of the user who has been granted access to the Holaplex organization as a member.
    pub user_id: Uuid,
    /// The ID of the Holaplex organization to which the user has been granted access.
    pub organization_id: Uuid,
    /// The datetime, in UTC, when the member joined the organization.
    pub created_at: DateTime,
    /// The datetime, in UTC, when the member was revoked from the organization.
    pub revoked_at: Option<DateTime>,
    /// The ID of the invitation that the member accepted to join the organization.
    pub invite_id: Uuid,
    /// The datetime, in UTC, when the member was deactivated from the organization.
    pub deactivated_at: Option<DateTime>,
}

#[ComplexObject]
impl Member {
    /// The Holaplex organization to which the member belongs, representing an individual who has been granted access to the organization.
    async fn organization(&self, ctx: &Context<'_>) -> Result<Option<Organization>> {
        let AppContext {
            organization_loader,
            ..
        } = ctx.data::<AppContext>()?;

        organization_loader.load_one(self.organization_id).await
    }

    /// The invitation to join the Holaplex organization that the member accepted in order to gain access to the organization.
    async fn invite(&self, ctx: &Context<'_>) -> Result<Option<invites::Model>> {
        let AppContext {
            member_invite_loader,
            ..
        } = ctx.data::<AppContext>()?;

        member_invite_loader.load_one(self.invite_id).await
    }
}

impl From<Model> for Member {
    fn from(
        Model {
            id,
            user_id,
            organization_id,
            created_at,
            revoked_at,
            invite_id,
            deactivated_at,
        }: Model,
    ) -> Self {
        Self {
            id,
            user_id,
            organization_id,
            created_at,
            revoked_at,
            invite_id,
            deactivated_at,
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::organizations::Entity",
        from = "Column::OrganizationId",
        to = "super::organizations::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Organizations,
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organizations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Entity {
    pub fn find_by_user(user: Uuid) -> Select<Self> {
        Self::find().filter(Column::UserId.eq(user).and(Column::RevokedAt.is_null()))
    }
}
