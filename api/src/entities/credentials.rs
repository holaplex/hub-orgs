//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.5

use async_graphql::*;
use sea_orm::entity::prelude::*;

use super::{organizations::Model as Organization, projects::Model as Project};
use crate::{dataloaders::project::CredentialId, AppContext};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, SimpleObject, poem_openapi::Object)]
#[sea_orm(table_name = "credentials")]
#[graphql(concrete(name = "Credential", params()))]
#[oai(rename = "Credential")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[oai(read_only)]
    pub id: Uuid,
    #[oai(read_only)]
    pub client_id: String,
    #[oai(read_only)]
    pub organization_id: Uuid,
    pub name: String,
    #[oai(read_only)]
    pub created_at: DateTime,
    #[oai(read_only)]
    pub created_by: Uuid,
}

#[ComplexObject]
impl Model {
    async fn organization(&self, ctx: &Context<'_>) -> Result<Option<Organization>> {
        let AppContext {
            organization_loader,
            ..
        } = ctx.data::<AppContext>()?;
        organization_loader.load_one(self.organization_id).await
    }

    async fn projects(&self, ctx: &Context<'_>) -> Result<Option<Vec<Project>>> {
        let AppContext { project_loader, .. } = ctx.data::<AppContext>()?;
        project_loader.load_one(CredentialId(self.id)).await
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::organizations::Entity",
        from = "Column::OrganizationId",
        to = "super::organizations::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Organizations,
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organizations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
